类型转换

其他类型转number
Number()
parseInt()
parseFloat()
转换对象 - 0

其他类型转string
toString()
String()
转换对象 + ''
+ 转换对象【取正】

其他类型转boolean
Boolean()
!! + 转换对象

0 
NaN
''
null
undefined
这5个转换为Boolean值为false

var a = {self: a}
console.log(a.self) // undefined
上面代码理解为：
var a
a = {self: a} // 此时将右边大括号赋值给 a 的时候，大括号中的 a 因为在前一步未赋值，所以 a 此时为undefined

var a = {}
a.self = a // 这句执行完，就可以无限调用 a.self.self.self.self...

var a = {n: 1}
var b = a
a.x = a = {n: 2} //此处先获取a.x 然后执行 a = {n: 2} 最后执行 a.x = (a = {n: 2})
console.log(a.x) // undefined
console.log(b.x) // [object Object]

var a = {n: 1}
var b = a
a = {n: 2}
a.x = a
console.log(a.x) // [object Object]
console.log(b.x) // undefined

如果一个对象没有被引用，它就是垃圾，就需要被回收。

var fn = function(){}
document.body.onclick = fn
fn = null
问：fn所指向的function是不是垃圾
答：不是垃圾，因为它被document.body.onclick所引用

早期IE浏览器的垃圾回收BUG，导致内存泄漏，只有完全关闭IE浏览器才能清除。

深拷贝和浅拷贝
深拷贝：复制之后二者无论做任何改动互不影响
反之则为浅拷贝

全局对象 window
window中的全局函数：
ECMA规定的： parseInt parseFloat Number String Boolean Object
浏览器私有的：document(DOM规范，由w3c制定) history alert prompt confirm 

var n =2;
n.xxx = 4;
console.log(n.xxx) // undefined